#!/bin/bash

# Define log file
LOG_FILE="$HOME/progress_script.log"

# Function to log messages
log_message() {
    echo "$(date +"%Y-%m-%d %H:%M:%S") - $1" >> "$LOG_FILE"
}

# Function to get absolute path of a file
get_absolute_path() {
    local file="$1"
    echo "$(cd "$(dirname "$file")"; pwd)/$(basename "$file")"
}

VIDEO_DURATION=""
CUT_AUDIO_FILES=""
TXT_FILES=""

# Function for Step 1: Convert video to mp3
step1() {
    local file="$1"
    abs_file=$(get_absolute_path "$file")
    abs_audio_file="${abs_file%.*}.mp3"
    VIDEO_DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$abs_file")
    VIDEO_DURATION=${VIDEO_DURATION%.*}
    log_message "Step 1: Converting video file to mp3: $abs_file"
    python3 /home/olivier/Documents/Projects/nautilus/Custom_nautilus_scripts/python_scripts/Video/VideoToAudio.py -v "$abs_file" >> "$LOG_FILE" 2>&1
    if [ $? -ne 0 ]; then
        log_message "Step 1: Error converting video file"
        exit 1
    fi
    log_message "Step 1: Completed"
}

step2() {
    CUT_AUDIO_FILES=$(python3 /home/olivier/Documents/Projects/nautilus/Custom_nautilus_scripts/python_scripts/Audio/automatic_cut_audio_file.py -d "$VIDEO_DURATION" -f "$abs_audio_file" 2>/dev/null)
    if [ $? -ne 0 ]; then
        log_message "Step 2: Error during cut audio"
        exit 1
    fi
    log_message "Step 2: Completed"
    log_message "log = $CUT_AUDIO_FILES"
    CUT_AUDIO_FILES=$(echo "$CUT_AUDIO_FILES" | sed -n 's/.*-\{20\} //p')
    CUT_AUDIO_FILES=$(echo "$CUT_AUDIO_FILES" | sed -e 's/[][]//g' -e "s/'//g" -e 's/, */,/g')
}

# Function for Step 3: Transcription / Translation
step3() {
    local param="$1"

    log_message "Step 3: Performing $param on audio files: $CUT_AUDIO_FILES"
    source ~/Documents/Projects/LLM/audio/env/bin/activate
    IFS=',' read -ra audio_files <<< "$CUT_AUDIO_FILES"

    for cut_audio_file in "${audio_files[@]}"; do
        TXT_FILE=$(python3 /home/olivier/Documents/Projects/nautilus/Custom_nautilus_scripts/python_scripts/AI/scripts.py -a "$param" -f "$cut_audio_file" 2>/dev/null)
        if [ $? -ne 0 ]; then
            log_message "Step 3: Error during $param for file $cut_audio_file. The audio file might be too short to translate / empty"
            continue
        fi
        # Append the value of TXT_FILE to the global variable TXT_FILES
        TXT_FILE=$(echo "$TXT_FILE" | sed -n 's/.*-\{20\} //p')
        TXT_FILE=$(echo "$TXT_FILE" | sed -e 's/[][]//g' -e "s/'//g" -e 's/, */,/g')
        if [ -n "$TXT_FILE" ]; then
            if [ -z "$TXT_FILES" ]; then
                TXT_FILES="$TXT_FILE"
            else
                TXT_FILES="$TXT_FILES,$TXT_FILE"
            fi
            log_message "Added $TXT_FILE to TXT_FILES"
        else
            log_message "TXT_FILE is empty, skipping."
        fi
    done
    log_message "Step 3: Completed"
}

step4() {
    log_message "Step 4: Concatenate $TXT_FILES into one"
    python3 /home/olivier/Documents/Projects/nautilus/Custom_nautilus_scripts/python_scripts/Audio/concatenate_text_files.py -f "$TXT_FILES" >> "$LOG_FILE" 2>&1
    if [ $? -ne 0 ]; then
        log_message "Step 4: Error during concatenate files $TXT_FILES"
        exit 1
    fi
    log_message "Step 4: Completed"
}


# Function to display the progress dialog
show_progress() {
    steps=("Step 1/4: Converting video to mp3..." "Step 2/4: Cuting audio file if needed..." "Step 3/4: Transcripting/Translating audio files" "Step 4/4: Concatenating txt files")

    log_message "Displaying steps"

    {
        for i in "${!steps[@]}"; do
            echo "# ${steps[$i]}"
            log_message "${steps[$i]}"
            echo "$(( (i + 1) * 25 ))"

            case $i in
                0) step1 "$file" ;;
                1) step2 ;;
                2) step3 "$param1" ;;
                3) step4  ;;
            esac
        done
    } | zenity --progress --title="Progress" --width=300 --height=200 --auto-close --text="Initializing..." 2>>"$LOG_FILE"

    if [ $? -eq 0 ]; then
        log_message "Process completed"
        zenity --info --width=300 --height=200 --text="All steps are completed. Click OK to close." --title="Process Completed" 2>>"$LOG_FILE"
    else
        log_message "Process interrupted or canceled"
    fi
}

# Log script start
log_message "Script started"

# Ask user for the action to perform
param1=$(zenity --list --title="Action to perform" --text="Choose the action:" --radiolist --column="Select" --column="Action" TRUE "translation" FALSE "transcription")

# Loop through all selected files
for file in "$@"; do
    abs_file=$(get_absolute_path "$file")
    abs_audio_file="${abs_file%.*}.mp3"
    # Log the parameters and the file
    log_message "Processing video file: $abs_file with parameter: $param1"
    log_message "audio file = $abs_audio_file"

    # Execute the function
    show_progress
done

# Log script end
log_message "Script ended"
